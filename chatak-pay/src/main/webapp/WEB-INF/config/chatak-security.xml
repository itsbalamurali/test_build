<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd 
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd ">

	<context:component-scan base-package="com.chatak.pay.service" />
	<context:component-scan base-package="com.chatak.pay.spring.security" />
	
	<mvc:annotation-driven />

	<!-- This is default url to get a token from OAuth -->
	<sec:http pattern="/pg/oauth/token" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
		authentication-manager-ref="clientAuthenticationManager" >
		<sec:intercept-url pattern="/oauth/token" access="ROLE_APP" />
		<sec:anonymous enabled="true" />
		<sec:http-basic />
		<!-- include this only if you need to authenticate clients via request 
			parameters -->
		<sec:custom-filter ref="clientCredentialsTokenEndpointFilter"
			after="BASIC_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
		
	</sec:http>

	<!-- This is where we tells spring security what URL should be protected 
		and what roles have access to them -->
	<sec:http pattern="/pg/**" create-session="never"
		entry-point-ref="oauthAuthenticationEntryPoint"
		access-decision-manager-ref="accessDecisionManager" >
		<sec:anonymous enabled="true" />
		<sec:intercept-url pattern="/pg/invalid-access*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:intercept-url pattern="/invalid-access*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:intercept-url pattern="/pg/session-expired*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:intercept-url pattern="/session-expired*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:intercept-url pattern="/pg/**" access="ROLE_APP" />
		<sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<sec:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sec:http>
	
	<bean id="basicAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="Chatak Software Services" />
	</bean>
	
	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="chatakServiceBasicAccessClientDetails" />
	</authentication-manager>
	

	<bean id="oauthAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="Chatak Software Services" />
		<property name="typeName" value="Bearer" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<authentication-manager alias="authenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="chatakServiceAccessUserDetailsService" />
	</authentication-manager>

	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="chatakServiceClientDetailsService" />
	</bean>


	<!-- This defined token store, we have used inmemory tokenstore for now 
		but this can be changed to a user defined one -->
	<!-- <bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" /> -->
		
	<bean id="tokenStore" class="com.chatak.pay.spring.security.JdbcTokenStore">
		<constructor-arg ref="jdbcTemplate" />
	</bean>

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${chatak.pg.db.driverClass}" />
		<property name="url" value="${chatak.pg.db.jdbcUrl}" />
		<property name="username" value="${chatak.pg.db.user}" />
		<property name="password" value="${chatak.pg.db.password}"/>
	</bean>

	<!-- This is where we defined token based configurations, token validity 
		and other things -->
	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="${oauth.access.support.refresh.token}" />
		<property name="accessTokenValiditySeconds" value="${oauth.access.token.validity.seconds}" />
	</bean>

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.TokenServicesUserApprovalHandler">
		<property name="tokenServices" ref="tokenServices" />
	</bean>

	<oauth:authorization-server
		client-details-service-ref="chatakServiceClientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>

	<oauth:resource-server id="resourceServerFilter"
		resource-id="test" token-services-ref="tokenServices" />

	<sec:global-method-security
		pre-post-annotations="enabled" proxy-target-class="false">
		<sec:expression-handler ref="oauthExpressionHandler" />
	</sec:global-method-security>

	<oauth:expression-handler id="oauthExpressionHandler" />
	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
	
	
</beans>
